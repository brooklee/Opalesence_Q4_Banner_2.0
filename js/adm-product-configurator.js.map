{"version":3,"sources":["webpack:///adm-product-configurator.js","webpack:///./src/scripts/adm-product-configurator.js"],"names":["webpackJsonp","622","module","exports","__webpack_require__","623","toggleIfSku","i","item","$card","$","find","length","addClass","removeIfCollectionNotEmpty","$attributeButton","parents","text","trim","hide","toggleUnlabeledHeading","$heading","test","hideActionsIfAttributeCollection","next","$innerFrame","$innerFrameDoc","Page","upi","namespace","dialogSettings","settings","chromelessColorbox","iframe","width","maxWidth","height","overlayClose","onComplete","on","get","contentWindow","ConfiguratorAdmin","handleDelete","off","onCleanup","nodes","$buttonDropdown","$modalButtons","$headings","$attributeGroupButton","$cardSection","getNodes","node","hasOwnProperty","$cont","openDialog","href","extend","colorbox","init","this","dropDownSelect","resize","each","colorboxClose","close","html","orgHandler","onclick","confirm","624"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GAEjCF,EAAOC,QAAUC,EAAoB,MAK/BC,IACA,SAAUH,EAAQC,EAASC,GAEjC,YC6GA,SAASE,GAAcC,EAAGC,GACtB,GAAIC,GAAQC,EAAGF,EAGc,KAHUC,EAAME,KAAM,gBAGjCC,QACbH,EAAME,KAAM,kCAAmCC,QAEhDH,EAAMI,SAAU,aAIxB,QAASC,GAA6BP,EAAGC,GACrC,GAAIO,GAAmBL,EAAGF,KACPO,EACVC,QAAS,WACTL,KAAM,iBACNM,OACAC,QAGLH,EAAiBI,OAKzB,QAASC,GAAyBb,EAAGC,GACjC,GAAIa,GAAWX,EAAGF,EACb,wBAAuBc,KAAMD,EAASJ,SACvCI,EAASR,SAAU,UAI3B,QAASU,GAAmChB,EAAGC,GAC3C,GAAIa,GAAWX,EAAGF,IAEZa,EAASJ,OAAOC,QAAUG,EAASG,OAAOb,KAAM,MAAOC,OAAS,GAClES,EAASL,QAAS,WAAYL,KAAM,kBAAmBQ,OA9J/Df,EAAA,IAMA,IAAoCqB,GAAaC,EAA7CC,EAAOC,IAAIC,UAAW,QAEtBC,EAAiBF,IAAIG,SAASC,oBAC9BC,QAAQ,EACRC,MAAO,OACPC,SAAU,IACVC,OAAQ,OACRC,cAAc,EACdC,WAAY,WAMRb,EAAcf,EAAG,aAAcC,KAAM,UACrCc,EAAYc,GAAI,OAAQ,WACpBb,EAAiBhB,EAAGe,EAAYe,IAAK,GAAIC,eACzCf,EAAea,GACX,QACA,6BACAZ,EAAKe,kBAAkBC,gBAG/BlB,EAAYc,GAAI,SAAU,WACtBb,EAAekB,IAAK,QAASjB,EAAKe,kBAAkBC,iBAG5DE,UAAW,WACPpB,EAAYmB,IAAK,eACjBlB,EAAekB,IAAK,SACpBnB,EAAc,KACdC,EAAiB,OAIzBC,GAAKe,mBACDI,OACIC,gBAAiB,yBACjBC,cAAe,eACfC,UAAW,WACXC,sBAAuB,yDACvBC,aAAc,iBAGlBC,SAAU,SAAWN,GACjBA,EAAA,MAAiBpC,EAAG,sBAEpB,KAAM,GAAI2C,KAAQP,GACTA,EAAMQ,eAAgBD,KACvBP,EAAMO,GAAQP,EAAMS,MAAM5C,KAAMmC,EAAMO,MAKlDG,WAAY,SAAWC,GACnB,GAAI1B,EAEJ,KAAM0B,EACF,OAAO,CAGX1B,GAAWrB,EAAEgD,OAAQ5B,GAAiB2B,KAAMA,IAC5C/C,EAAEiD,SAAU5B,IAGhB6B,KAAM,WACFC,KAAKT,SAAUS,KAAKf,MAKpBe,MAAKf,MAAMC,gBAAgBe,iBAE3BpD,EAAG,UAAW6B,GAAI,OAAQ,WACtB7B,EAAEiD,SAASI,WAIfF,KAAKf,MAAMG,UAAUe,KAAM,WACvB,GAAI3C,GAAWX,EAAGmD,OACjBxC,EAASJ,OAAOC,QAAUG,EAASF,SAGxC0C,KAAKf,MAAME,cAAcW,SAAU7B,GAEnCF,IAAIqC,cAAgB,WAChBvD,EAAEiD,SAASO,SAIfL,KAAKf,MAAMI,sBAAsBiB,KAC7B,8CAGJN,KAAKf,MAAMI,sBAAsBc,KAAMlD,GAEvC+C,KAAKf,MAAMK,aAAaa,KAAM1D,GAE9BuD,KAAKf,MAAMG,UAAUe,KAAM5C,GAE3ByC,KAAKf,MAAMG,UAAUe,KAAMzC,IAG/BoB,aAAc,WACV,GAAIyB,GAAaP,KAAKQ,SAAW,YAGjC,SAFgBC,QAAS,iDAENF,MAI3B1D,EAAG,WACCiB,EAAKe,kBAAkBkB,UDoDrBW,IACA,SAAUrE,EAAQC,OAMrB","file":"adm-product-configurator.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ 622:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(623);\n\n\n/***/ }),\n\n/***/ 623:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(624);\n\nfunction autoResizeHeight() {\n    this.height = this.contentWindow.document.body.scrollHeight + 'px';\n}\n\nvar Page = upi.namespace('Page'),\n    $innerFrame,\n    $innerFrameDoc;\n\nvar dialogSettings = upi.settings.chromelessColorbox({\n    iframe: true,\n    width: '100%',\n    maxWidth: 960,\n    height: '100%',\n    overlayClose: false,\n    onComplete: function onComplete() {\n        // CRUD operations within these iframes currently trigger a page refresh inside the frame\n        // because of this we must first listen to load/unload events on the iframe itself\n        // then bind to click events on the document window inside the iframe\n        // anytime an operation occurs we cleanup listening on load/unload events on inner document then rebind again\n        // closing the dialog will clear out everything\n        $innerFrame = $('#colorbox').find('iframe');\n        $innerFrame.on('load', function () {\n            $innerFrameDoc = $($innerFrame.get(0).contentWindow);\n            $innerFrameDoc.on('click', '.delete, [id$=\"btnDelete\"]', Page.ConfiguratorAdmin.handleDelete);\n        });\n        $innerFrame.on('unload', function () {\n            $innerFrameDoc.off('click', Page.ConfiguratorAdmin.handleDelete);\n        });\n    },\n    onCleanup: function onCleanup() {\n        $innerFrame.off('load unload');\n        $innerFrameDoc.off('click');\n        $innerFrame = null;\n        $innerFrameDoc = null;\n    }\n});\n\nPage.ConfiguratorAdmin = {\n    nodes: {\n        $buttonDropdown: '.button.dropDownSelect',\n        $modalButtons: '[data-modal]',\n        $headings: '.heading',\n        $attributeGroupButton: '.action-list .button:contains(Add Top Level Attribute)',\n        $cardSection: '.card-section'\n    },\n\n    getNodes: function getNodes(nodes) {\n        nodes['$cont'] = $('#adm-configurations');\n\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                nodes[node] = nodes.$cont.find(nodes[node]);\n            }\n        }\n    },\n\n    openDialog: function openDialog(href) {\n        var settings;\n\n        if (!href) {\n            return false;\n        }\n\n        settings = $.extend(dialogSettings, { href: href });\n        $.colorbox(settings);\n    },\n\n    init: function init() {\n        this.getNodes(this.nodes);\n\n        var self = this;\n\n        // init dropdown menus\n        this.nodes.$buttonDropdown.dropDownSelect();\n\n        $('iframe').on('load', function () {\n            $.colorbox.resize();\n        });\n\n        // hide empty .heaading elements\n        this.nodes.$headings.each(function () {\n            var $heading = $(this);\n            !$heading.text().trim() && $heading.hide();\n        });\n\n        this.nodes.$modalButtons.colorbox(dialogSettings);\n\n        upi.colorboxClose = function () {\n            $.colorbox.close();\n        };\n\n        // patch - change class and label on attribute (group level) buttons\n        this.nodes.$attributeGroupButton.html('<i class=\"icon-at\"></i> Add Attribute List');\n        // patch - remove \"Add Attribute List\" button from main group actions once an item has been added to a colelction\n        this.nodes.$attributeGroupButton.each(removeIfCollectionNotEmpty);\n        // patch - toggle sku icon on groups that will display as a sku\n        this.nodes.$cardSection.each(toggleIfSku);\n        // patch - receed unlabeled headings\n        this.nodes.$headings.each(toggleUnlabeledHeading);\n        // patch - hide group actions if in an attribute collection\n        this.nodes.$headings.each(hideActionsIfAttributeCollection);\n    },\n\n    handleDelete: function handleDelete() {\n        var orgHandler = this.onclick || function () {},\n            confirmed = confirm('Are you sure? This action can not be undone.');\n\n        return confirmed ? orgHandler() : false;\n    }\n};\n\n$(function () {\n    Page.ConfiguratorAdmin.init();\n});\n\n// helpers\nfunction toggleIfSku(i, item) {\n    var $card = $(item),\n        $skuListItems = $card.find('.sku-list dl');\n\n    if ($skuListItems.length === 1 && !$card.find('.attribute-list-collection > *').length) {\n        $card.addClass('sku-group');\n    }\n}\n\nfunction removeIfCollectionNotEmpty(i, item) {\n    var $attributeButton = $(item),\n        hasContent = !!$attributeButton.parents('.mod-bd').find('.card-section').text().trim();\n\n    if (hasContent) {\n        $attributeButton.hide();\n    }\n}\n\n// remove dark background from headings that do not represent a label in the configurator UI\nfunction toggleUnlabeledHeading(i, item) {\n    var $heading = $(item);\n    if (/Attribute Collection/.test($heading.text())) {\n        $heading.addClass('receed');\n    }\n}\n\nfunction hideActionsIfAttributeCollection(i, item) {\n    var $heading = $(item);\n\n    if (!$heading.text().trim() && $heading.next().find('li').length > 0) {\n        $heading.parents('.mod-bd').find('> .action-list').hide();\n    }\n}\n\n/***/ }),\n\n/***/ 624:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n},[622]);\n\n\n// WEBPACK FOOTER //\n// adm-product-configurator.js","import '../css/adm-product-page-configurations.scss';\n\nfunction autoResizeHeight () {\n    this.height = this.contentWindow.document.body.scrollHeight + 'px';\n}\n\nvar Page = upi.namespace( 'Page' ), $innerFrame, $innerFrameDoc;\n\nvar dialogSettings = upi.settings.chromelessColorbox( {\n    iframe: true,\n    width: '100%',\n    maxWidth: 960,\n    height: '100%',\n    overlayClose: false,\n    onComplete: function () {\n        // CRUD operations within these iframes currently trigger a page refresh inside the frame\n        // because of this we must first listen to load/unload events on the iframe itself\n        // then bind to click events on the document window inside the iframe\n        // anytime an operation occurs we cleanup listening on load/unload events on inner document then rebind again\n        // closing the dialog will clear out everything\n        $innerFrame = $( '#colorbox' ).find( 'iframe' );\n        $innerFrame.on( 'load', function () {\n            $innerFrameDoc = $( $innerFrame.get( 0 ).contentWindow );\n            $innerFrameDoc.on(\n                'click',\n                '.delete, [id$=\"btnDelete\"]',\n                Page.ConfiguratorAdmin.handleDelete\n            );\n        } );\n        $innerFrame.on( 'unload', function () {\n            $innerFrameDoc.off( 'click', Page.ConfiguratorAdmin.handleDelete );\n        } );\n    },\n    onCleanup: function () {\n        $innerFrame.off( 'load unload' );\n        $innerFrameDoc.off( 'click' );\n        $innerFrame = null;\n        $innerFrameDoc = null;\n    }\n} );\n\nPage.ConfiguratorAdmin = {\n    nodes: {\n        $buttonDropdown: '.button.dropDownSelect',\n        $modalButtons: '[data-modal]',\n        $headings: '.heading',\n        $attributeGroupButton: '.action-list .button:contains(Add Top Level Attribute)',\n        $cardSection: '.card-section'\n    },\n\n    getNodes: function ( nodes ) {\n        nodes['$cont'] = $( '#adm-configurations' );\n\n        for ( var node in nodes ) {\n            if ( nodes.hasOwnProperty( node ) ) {\n                nodes[node] = nodes.$cont.find( nodes[node] );\n            }\n        }\n    },\n\n    openDialog: function ( href ) {\n        var settings;\n\n        if ( !href ) {\n            return false;\n        }\n\n        settings = $.extend( dialogSettings, {href: href} );\n        $.colorbox( settings );\n    },\n\n    init: function () {\n        this.getNodes( this.nodes );\n\n        var self = this;\n\n        // init dropdown menus\n        this.nodes.$buttonDropdown.dropDownSelect();\n\n        $( 'iframe' ).on( 'load', function () {\n            $.colorbox.resize();\n        } );\n\n        // hide empty .heaading elements\n        this.nodes.$headings.each( function () {\n            var $heading = $( this );\n            !$heading.text().trim() && $heading.hide();\n        } );\n\n        this.nodes.$modalButtons.colorbox( dialogSettings );\n\n        upi.colorboxClose = function () {\n            $.colorbox.close();\n        };\n\n        // patch - change class and label on attribute (group level) buttons\n        this.nodes.$attributeGroupButton.html(\n            '<i class=\"icon-at\"></i> Add Attribute List'\n        );\n        // patch - remove \"Add Attribute List\" button from main group actions once an item has been added to a colelction\n        this.nodes.$attributeGroupButton.each( removeIfCollectionNotEmpty );\n        // patch - toggle sku icon on groups that will display as a sku\n        this.nodes.$cardSection.each( toggleIfSku );\n        // patch - receed unlabeled headings\n        this.nodes.$headings.each( toggleUnlabeledHeading );\n        // patch - hide group actions if in an attribute collection\n        this.nodes.$headings.each( hideActionsIfAttributeCollection );\n    },\n\n    handleDelete: function () {\n        var orgHandler = this.onclick || function () {},\n            confirmed = confirm( 'Are you sure? This action can not be undone.' );\n\n        return confirmed ? orgHandler() : false;\n    }\n};\n\n$( function () {\n    Page.ConfiguratorAdmin.init();\n} );\n\n// helpers\nfunction toggleIfSku ( i, item ) {\n    var $card = $( item ), $skuListItems = $card.find( '.sku-list dl' );\n\n    if (\n        $skuListItems.length === 1 &&\n        !$card.find( '.attribute-list-collection > *' ).length\n    ) {\n        $card.addClass( 'sku-group' );\n    }\n}\n\nfunction removeIfCollectionNotEmpty ( i, item ) {\n    var $attributeButton = $( item ),\n        hasContent = !!$attributeButton\n            .parents( '.mod-bd' )\n            .find( '.card-section' )\n            .text()\n            .trim();\n\n    if ( hasContent ) {\n        $attributeButton.hide();\n    }\n}\n\n// remove dark background from headings that do not represent a label in the configurator UI\nfunction toggleUnlabeledHeading ( i, item ) {\n    var $heading = $( item );\n    if ( /Attribute Collection/.test( $heading.text() ) ) {\n        $heading.addClass( 'receed' );\n    }\n}\n\nfunction hideActionsIfAttributeCollection ( i, item ) {\n    var $heading = $( item );\n\n    if ( !$heading.text().trim() && $heading.next().find( 'li' ).length > 0 ) {\n        $heading.parents( '.mod-bd' ).find( '> .action-list' ).hide();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/scripts/adm-product-configurator.js"],"sourceRoot":""}