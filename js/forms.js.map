{"version":3,"sources":["webpack:///forms.js","webpack:///./src/scripts/forms.js"],"names":["webpackJsonp","643","module","exports","__webpack_require__","644","window","upiWebpartForm","webpart","initialize","submitButton","document","getElementById","submit_id","formErrorContainer","error_id","addEvent","e","target","srcElement","parentNode","preventDefault","returnValue","validate","this","orgText","innerHTML","errorList","sendingText","fieldId","requiredList","elm","isValid","validate_field","length","focus","push","toggle_field","errMsg","i","l","toggle_errors","resize","p","tag_reg","nodeName","match","err_reg","test","className","replace","$","colorbox","msg","style","display","formError","value","required_list","addEventListener","attachEvent","filter","el","type","fn","call","event","init","toggleErrors","toggleField","querySelectorAll"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GAEjCF,EAAOC,QAAUC,EAAoB,MAK/BC,IACA,SAAUH,EAAQC,EAASC,GAEjC,YCbqBE,QAAOC,eAAiB,SAAWC,GAgCpD,QAASC,KA0BL,MAxBAC,GAAeC,SAASC,eAAgBJ,EAAQK,WAChDC,EAAqBH,SAASC,eAAgBJ,EAAQO,UAItDC,EAAUL,SAAU,QAAS,SAAWM,GACpC,GAAIC,GAASD,EAAEC,QAAUD,EAAEE,UAG3B,KADAT,EAAeC,SAASC,eAAgBJ,EAAQK,WACxCK,GAAUA,EAAOE,YAAcF,GAAUR,GAC7CQ,EAASA,EAAOE,UAEpB,IAAKF,GAAUA,GAAUR,EAOrB,MALKO,GAAEI,gBACHJ,EAAEI,iBAENJ,EAAEK,aAAc,EAETC,EAAUN,KAKlBO,KAGX,QAASD,GAAWN,GAChB,GACIQ,IADSR,EAAEC,QAAUD,EAAEE,WACbT,EAAagB,WACvBC,IAEJjB,GAAagB,UAAY,SAAWE,EAAc,qCAElD,KAAM,GAAIC,KAAWC,GAAe,CAChC,GAAIC,GAAMpB,SAASC,eAAgBiB,EACnC,IAAKE,EAAM,CACP,GAAIC,GAAUC,EAAgBF,EACxBC,KACuB,GAApBL,EAAUO,QACXH,EAAII,QAERR,EAAUS,KAAMN,EAAaD,KAEjCQ,EAAcN,EAAKC,IAG3B,GAAKL,EAAUO,OAAS,EAAI,CAExB,IAAM,GADFI,GAAS,GACHC,EAAI,EAAGC,EAAIb,EAAUO,OAAQK,EAAIC,EAAGD,IAC1CD,IAAuB,KAAXA,EAAiB,KAAO,IAAMX,EAAUY,EAKxD,OAHAE,GAAeH,GACf5B,EAAagB,UAAYD,EACzBiB,KACO,EAEXD,IAGJ,QAASJ,GAAeN,EAAKC,GAIzB,IAHA,GAAIW,GAAIZ,EAAIX,WACRwB,EAAU,aAEND,IAAMA,EAAEE,SAASC,MAAOF,IAC5BD,EAAIA,EAAEvB,UAGJY,GAGIe,EAAQC,KAAML,EAAEM,aACtBN,EAAEM,UAAYN,EAAEM,UAAUC,QAASH,EAAS,KAH5CJ,EAAEM,WAAa,SAOvB,QAASP,KACL,IACIS,EAAEC,SAASV,SAEf,MAAQzB,KAIZ,QAASwB,GAAgBY,GACfvC,IAGDuC,GACDvC,EAAmBwC,MAAMC,QAAU,QACnCzC,EAAmBY,UAAY,MAAQ8B,EAAYH,EAAM,QAGzDvC,EAAmBwC,MAAMC,QAAU,QAI3C,QAAStB,GAAiBF,GACtB,MAAqB,KAAbA,EAAI0B,MAnIhB,GAGI/C,GAEAI,EAHAiC,EAAU,sBAKVS,EAAY,wBACZ5B,EAAc,UACdE,EAAetB,EAAQkD,cA6HvB1C,GA3HoB,WACfL,SAASgD,kBAKJhD,SAASiD,eAqHP,WACZ,QAASC,GAASC,EAAIC,EAAMC,GACxB,IAAM,GAAIzB,GAAI,EAAGC,EAAIsB,EAAG5B,OAAQK,EAAIC,EAAGD,IACnCvB,EAAU8C,EAAIC,EAAMC,GAI5B,WAA0C,KAA9BrD,SAASgD,iBACV,SAAWG,EAAIC,EAAMC,GACnBF,GAAMA,EAAGjB,UAAYiB,IAAOxD,OAC7BwD,EAAGH,iBAAkBI,EAAMC,GAAI,GAG/BH,EAAQC,EAAIC,EAAMC,IAKvB,SAAWF,EAAIC,EAAMC,GACnBF,GAAMA,EAAGjB,UAAYiB,IAAOxD,OAC7BwD,EAAGF,YAAa,KAAOG,EAAM,WACzB,MAAOC,GAAGC,KAAMH,EAAIxD,OAAO4D,SAI/BL,EAAQC,EAAIC,EAAMC,OAK9B,QACIG,KAAM1D,EACNc,SAAUA,EACV6C,aAAc3B,EACd4B,YAAahC,GACf8B,QAGwB,WACdxD,SAAS2D,uBDgCtB","file":"forms.js","sourcesContent":["webpackJsonp([28],{\n\n/***/ 643:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(644);\n\n\n/***/ }),\n\n/***/ 644:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar upiWebpartForm = window.upiWebpartForm = function (webpart) {\n    var emptyFields = '',\n        mainForm = null,\n        err_reg = /(^|\\s+)error(\\s+|$)/,\n        submitButton,\n        formWrap,\n        formErrorContainer,\n        formSuccessContainer,\n        formError = 'Error submitting form',\n        sendingText = 'Sending',\n        requiredList = webpart.required_list;\n\n    var DOMContentLoaded = function () {\n        if (document.addEventListener) {\n            return function (callback) {\n                document.addEventListener('DOMContentLoaded', callback, false);\n            };\n        } else if (document.attachEvent) {\n            return function (callback) {\n                document.attachEvent('onreadystatechange', handleLoad);\n\n                function handleLoad() {\n                    if (document.readyState === 'complete') {\n                        document.detachEvent('onreadystatechange', handleLoad);\n                        callback();\n                    }\n                };\n            };\n        }\n    }();\n\n    function initialize() {\n        //formWrap = document.getElementById( webpart.form_id );\n        submitButton = document.getElementById(webpart.submit_id);\n        formErrorContainer = document.getElementById(webpart.error_id);\n        //mainForm = getElementsByClassName( formWrap, '*', 'mainForm')[0];\n        //formSuccessContainer = getElementsByClassName( formWrap, '*','successMessage')[0];\n\n        addEvent(document, 'click', function (e) {\n            var target = e.target || e.srcElement;\n\n            submitButton = document.getElementById(webpart.submit_id);\n            while (target && target.parentNode && target != submitButton) {\n                target = target.parentNode;\n            }\n            if (target && target == submitButton) {\n                //prevent double postbacks\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n                e.returnValue = false;\n\n                return validate(e);\n            }\n        });\n\n        return this;\n    };\n\n    function validate(e) {\n        var target = e.target || e.srcElement,\n            orgText = submitButton.innerHTML,\n            errorList = [];\n\n        submitButton.innerHTML = '<span>' + sendingText + '<i class=\"arrow\">&#0187;</i></span>';\n\n        for (var fieldId in requiredList) {\n            var elm = document.getElementById(fieldId);\n            if (elm) {\n                var isValid = validate_field(elm);\n                if (!isValid) {\n                    if (errorList.length == 0) {\n                        elm.focus();\n                    }\n                    errorList.push(requiredList[fieldId]);\n                }\n                toggle_field(elm, isValid);\n            }\n        }\n        if (errorList.length > 0) {\n            var errMsg = '';\n            for (var i = 0, l = errorList.length; i < l; i++) {\n                errMsg += (errMsg !== '' ? ', ' : '') + errorList[i];\n            }\n            toggle_errors(errMsg);\n            submitButton.innerHTML = orgText;\n            resize();\n            return false;\n        }\n        toggle_errors();\n    };\n\n    function toggle_field(elm, isValid) {\n        var p = elm.parentNode,\n            tag_reg = /span|div/gi;\n        // find field wrapper, should be span|div tag\n        while (p && !p.nodeName.match(tag_reg)) {\n            p = p.parentNode;\n        }\n\n        if (!isValid) {\n            p.className += ' error';\n        } else if (err_reg.test(p.className)) {\n            p.className = p.className.replace(err_reg, '');\n        }\n    };\n\n    function resize() {\n        try {\n            $.colorbox.resize();\n        } catch (e) {}\n    };\n\n    function toggle_errors(msg) {\n        if (!formErrorContainer) {\n            return;\n        }\n        if (msg) {\n            formErrorContainer.style.display = 'block';\n            formErrorContainer.innerHTML = '<b>' + formError + msg + '</b>';\n        } else {\n            formErrorContainer.style.display = 'none';\n        }\n    };\n\n    function validate_field(elm) {\n        return !elm.value == '';\n    };\n\n    var addEvent = function () {\n        function filter(el, type, fn) {\n            for (var i = 0, l = el.length; i < l; i++) {\n                addEvent(el, type, fn);\n            }\n        };\n\n        if (typeof document.addEventListener !== 'undefined') {\n            return function (el, type, fn) {\n                if (el && el.nodeName || el === window) {\n                    el.addEventListener(type, fn, false);\n                } else {\n                    filter(el, type, fn);\n                }\n            };\n        }\n\n        return function (el, type, fn) {\n            if (el && el.nodeName || el === window) {\n                el.attachEvent('on' + type, function () {\n                    return fn.call(el, window.event);\n                });\n            } else {\n                filter(el, type, fn);\n            }\n        };\n    }();\n\n    return {\n        init: initialize,\n        validate: validate,\n        toggleErrors: toggle_errors,\n        toggleField: toggle_field\n    }.init();\n};\n\nvar getElementsByClassName = function () {\n    if (typeof document.querySelectorAll != 'undefined') {\n        return function (elm, strTagName, strClassName) {\n            return elm.querySelectorAll(strTagName + '.' + strClassName);\n        };\n    } else {\n        return function (elm, strTagName, strClassName) {\n            var arrElements = strTagName == '*' && elm.all ? elm.all : elm.getElementsByTagName(strTagName);\n            var arrReturnElements = new Array();\n            strClassName = strClassName.replace(/\\-/g, '\\\\-');\n            var regExp = new RegExp('(^|\\\\s)' + strClassName + '(\\\\s|$)');\n            var node;\n            for (var i = 0; i < arrElements.length; i++) {\n                node = arrElements[i];\n                if (regExp.test(node.className)) {\n                    arrReturnElements.push(node);\n                }\n            }\n            return arrReturnElements;\n        };\n    }\n}();\n\n/***/ })\n\n},[643]);\n\n\n// WEBPACK FOOTER //\n// forms.js","var upiWebpartForm = window.upiWebpartForm = function ( webpart ) {\n    var emptyFields = '',\n        mainForm = null,\n        err_reg = /(^|\\s+)error(\\s+|$)/,\n        submitButton,\n        formWrap,\n        formErrorContainer,\n        formSuccessContainer,\n        formError = 'Error submitting form',\n        sendingText = 'Sending',\n        requiredList = webpart.required_list;\n\n    var DOMContentLoaded = (function () {\n        if ( document.addEventListener ) {\n            return function ( callback ) {\n                document.addEventListener( 'DOMContentLoaded', callback, false );\n            };\n        }\n        else if ( document.attachEvent ) {\n            return function ( callback ) {\n                document.attachEvent( 'onreadystatechange', handleLoad );\n\n                function handleLoad () {\n                    if ( document.readyState === 'complete' ) {\n                        document.detachEvent( 'onreadystatechange', handleLoad );\n                        callback();\n                    }\n                };\n            };\n        }\n    })();\n\n    function initialize () {\n        //formWrap = document.getElementById( webpart.form_id );\n        submitButton = document.getElementById( webpart.submit_id );\n        formErrorContainer = document.getElementById( webpart.error_id );\n        //mainForm = getElementsByClassName( formWrap, '*', 'mainForm')[0];\n        //formSuccessContainer = getElementsByClassName( formWrap, '*','successMessage')[0];\n\n        addEvent( document, 'click', function ( e ) {\n            var target = e.target || e.srcElement;\n\n            submitButton = document.getElementById( webpart.submit_id );\n            while ( target && target.parentNode && target != submitButton ) {\n                target = target.parentNode;\n            }\n            if ( target && target == submitButton ) {\n                //prevent double postbacks\n                if ( e.preventDefault ) {\n                    e.preventDefault();\n                }\n                e.returnValue = false;\n\n                return validate( e );\n            }\n\n        } );\n\n        return this;\n    };\n\n    function validate ( e ) {\n        var target = e.target || e.srcElement,\n            orgText = submitButton.innerHTML,\n            errorList = [];\n\n        submitButton.innerHTML = '<span>' + sendingText + '<i class=\"arrow\">&#0187;</i></span>';\n\n        for ( var fieldId in requiredList ) {\n            var elm = document.getElementById( fieldId );\n            if ( elm ) {\n                var isValid = validate_field( elm );\n                if ( !isValid ) {\n                    if ( errorList.length == 0 ) {\n                        elm.focus();\n                    }\n                    errorList.push( requiredList[fieldId] );\n                }\n                toggle_field( elm, isValid );\n            }\n        }\n        if ( errorList.length > 0 ) {\n            var errMsg = '';\n            for ( var i = 0, l = errorList.length; i < l; i++ ) {\n                errMsg += ((errMsg !== '') ? ', ' : '') + errorList[i];\n            }\n            toggle_errors( errMsg );\n            submitButton.innerHTML = orgText;\n            resize();\n            return false;\n        }\n        toggle_errors();\n    };\n\n    function toggle_field ( elm, isValid ) {\n        var p = elm.parentNode,\n            tag_reg = /span|div/gi;\n        // find field wrapper, should be span|div tag\n        while ( p && !p.nodeName.match( tag_reg ) ) {\n            p = p.parentNode;\n        }\n\n        if ( !isValid ) {\n            p.className += ' error';\n        }\n        else if ( err_reg.test( p.className ) ) {\n            p.className = p.className.replace( err_reg, '' );\n        }\n    };\n\n    function resize () {\n        try {\n            $.colorbox.resize();\n        }\n        catch ( e ) {\n        }\n    };\n\n    function toggle_errors ( msg ) {\n        if ( !formErrorContainer ) {\n            return;\n        }\n        if ( msg ) {\n            formErrorContainer.style.display = 'block';\n            formErrorContainer.innerHTML = '<b>' + formError + msg + '</b>';\n        }\n        else {\n            formErrorContainer.style.display = 'none';\n        }\n    };\n\n    function validate_field ( elm ) {\n        return !elm.value == '';\n    };\n\n    var addEvent = (function () {\n        function filter ( el, type, fn ) {\n            for ( var i = 0, l = el.length; i < l; i++ ) {\n                addEvent( el, type, fn );\n            }\n        };\n\n        if ( typeof document.addEventListener !== 'undefined' ) {\n            return function ( el, type, fn ) {\n                if ( el && el.nodeName || el === window ) {\n                    el.addEventListener( type, fn, false );\n                }\n                else {\n                    filter( el, type, fn );\n                }\n            };\n        }\n\n        return function ( el, type, fn ) {\n            if ( el && el.nodeName || el === window ) {\n                el.attachEvent( 'on' + type, function () {\n                    return fn.call( el, window.event );\n                } );\n            }\n            else {\n                filter( el, type, fn );\n            }\n        };\n    })();\n\n    return {\n        init: initialize,\n        validate: validate,\n        toggleErrors: toggle_errors,\n        toggleField: toggle_field\n    }.init();\n};\n\nvar getElementsByClassName = (function () {\n    if ( typeof document.querySelectorAll != 'undefined' ) {\n        return function ( elm, strTagName, strClassName ) {\n            return elm.querySelectorAll( strTagName + '.' + strClassName );\n        }\n    }\n    else {\n        return function ( elm, strTagName, strClassName ) {\n            var arrElements = (strTagName == '*' && elm.all) ? elm.all : elm.getElementsByTagName( strTagName );\n            var arrReturnElements = new Array();\n            strClassName = strClassName.replace( /\\-/g, '\\\\-' );\n            var regExp = new RegExp( '(^|\\\\s)' + strClassName + '(\\\\s|$)' );\n            var node;\n            for ( var i = 0; i < arrElements.length; i++ ) {\n                node = arrElements[i];\n                if ( regExp.test( node.className ) ) {\n                    arrReturnElements.push( node );\n                }\n            }\n            return (arrReturnElements);\n        }\n    }\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/scripts/forms.js"],"sourceRoot":""}